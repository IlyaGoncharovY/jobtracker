import TelegramBot, { Message } from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import {sendFormData} from "./services/telegramService";
import {sendCommissionMessage, sendVerificationMessage} from "./view/messages";
import {CommissionDataTypes, VerificationDataTypes} from "../formServer/types/formTypes";

dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN!;
const webhookUrl = process.env.URL_SERVER!;
const webTMAUrl = 'https://ilyagoncharovy.github.io/jobtracker/';
const webGoogleSheetUrl = 'https://docs.google.com/spreadsheets/d/1zsAZjXsQPDBvxJt1cGykvFtEB1gCKVPpFD8ckbhZtys/edit?gid=1582341699#gid=1582341699';
const webYandexTechCardUrl = 'https://disk.yandex.ru/d/iA59ojO89g5vDw';
const dwarfFightGameUrl = 'https://ilyagoncharovy.github.io/dwarf-fight/';


const bot = new TelegramBot(token, { polling: true });
bot.setWebHook(webhookUrl);

const participants = new Set<number>();
console.log(participants)

bot.on('message', async (msg: Message) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    console.log('bot on started');
    participants.add(chatId);

    if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg?.web_app_data?.data);

            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–º
            if (data?.selectedEmployeeName) {
                await sendFormData('https://jobtracker-l44k.onrender.com/api/forms/send-commission', {
                    dateCommission: data.formattedDate,
                    employeeName: data.selectedEmployeeName,
                    station: data.selectedStationName,
                    remarks: data.commissionRemarks,
                });

                await bot.sendMessage(chatId, '‚úÖ –§–æ—Ä–º–∞ "–ö–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.');

                for (const participantChatId of participants) {
                    await bot.sendMessage(participantChatId, 'üó£üì¢üó£üì¢üó£üì¢ –í —Ç–∞–±–ª–∏—á–∫—É, –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ üë®üèª‚Äçüîß, –≤–Ω–µ—Å–ª–∏ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüó≥Ô∏è.');
                }
            }

            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏
            if (data?.selectedRadioStationName) {
                await sendFormData('https://jobtracker-l44k.onrender.com/api/forms/send-verification', {
                    dateVerification: data.formattedDate,
                    station: data.selectedRadioStationName,
                    serialNumber: data.radioSerialNumber,
                });

                await bot.sendMessage(chatId, '‚úÖ –§–æ—Ä–º–∞ "–†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.');

                for (const participantChatId of participants) {
                    await bot.sendMessage(participantChatId, 'üó£üì¢üó£üì¢üó£üì¢ –í —Ç–∞–±–ª–∏—á–∫—É, —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ üì≤, –≤–Ω–µ—Å–ª–∏ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üó≥Ô∏è.');
                }
            }
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', e);
        }
    }
    if (text === '/start') {
        await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ ü™ü "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É, —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"', {
            reply_markup: {
                keyboard: [
                    [{text: '‚û°Ô∏è –ó–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É', web_app: {url: webTMAUrl}}]
                ]
            }
        });

        await bot.sendMessage(chatId, 'üöÄüöÄüöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤—Å–µ üíØ!' +
            '–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É ü™™ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—á–∫–µ üìÉ', {
            reply_markup: {
                inline_keyboard: [
                    [{text: 'üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ—Ö-–∫–∞—Ä—Ç—ã', web_app: {url: webYandexTechCardUrl}}],
                    [{text: 'üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É', web_app: {url: webGoogleSheetUrl}}],
                    [{text: 'üßôüèº‚Äç‚ôÇÔ∏è –ü–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É', web_app: {url: dwarfFightGameUrl}}]
                ]
            }
        });
    }

    if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg?.web_app_data?.data);

            if (data?.selectedEmployeeName) {
                await sendCommissionMessage(bot, chatId, data as CommissionDataTypes);
            }

            if (data?.selectedRadioStationName) {
                await sendVerificationMessage(bot, chatId, data as VerificationDataTypes);
            }

            setTimeout(async ()=> {
                await bot.sendMessage( chatId, 'üî•üî•üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–µ –∑–∞–±—É–¥—å –ø–æ—Ö–≤–∞–ª–∏—Ç—å —Å–µ–±—è :)');
            }, 2000)
        } catch (e) {
            console.log(e)
        }
    }
});


export default bot;
